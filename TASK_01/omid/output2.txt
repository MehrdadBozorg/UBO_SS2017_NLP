import_NOUN nltk_NOUNfrom nltk.tokenize import_NOUN word_tokenize_NOUNfrom nltk.chunk import_NOUN ne_chunk_NOUNimport_NOUN sys_NOUNreload_NOUN ( sys_NOUN )sys.setdefaultencoding_VERB ( 'utf8_NOUN ' )FILE_PATH_NOUN =_NOUN 'some-text.txt 'OUTPUT1_PATH_NOUN =_NOUN 'output1.txt 'OUTPUT2_PATH_NOUN =_NOUN 'output2.txt 'def_NOUN format_output_NOUN ( entry_NOUN ) :if type_NOUN ( entry_NOUN ) is_VERB nltk.tree.Tree :return_NOUN '_'.join ( [ x_NOUN [_NOUN 0 ]_NOUN for x_NOUN in list_NOUN ( entry_NOUN ) ]_NOUN ) +_NOUN '_NER 'elif entry_NOUN [_VERB 1 ]_NOUN in [_NOUN 'VERB_NOUN ' , 'NOUN ' ]_NOUN :return_NOUN entry_NOUN [_VERB 0 ]_NOUN +_NOUN '__NOUN ' + entry_NOUN [_VERB 1 ] .upper_NOUN ( )return_NOUN entry_NOUN [_VERB 0 ]_NOUNwith open ( FILE_PATH_NOUN , 'r_NOUN ' ) as file_NOUN , open ( OUTPUT1_PATH_NOUN , 'w_NOUN ' ) as file_output1_NOUN , open ( OUTPUT2_PATH_NOUN , 'w_NOUN ' ) as file_output2_NOUN :for line_NOUN in file_NOUN :tokens_NOUN =_VERB word_tokenize_NOUN ( line_NOUN )without_ner_NOUN = [ tag_NOUN for tag_NOUN in nltk.pos_tag_NOUN ( tokens_NOUN , tagset='universal_NOUN ' ) ]_NOUNner = ne_chunk_NOUN ( without_ner_NOUN , binary=False_NOUN )output1 =_NOUN ' '.join_NOUN ( [ format_output_NOUN ( chunk_NOUN ) for chunk_NOUN in without_ner_NOUN ]_NOUN )output2 =_NOUN ' '.join_NOUN ( [ format_output_NOUN ( chunk_NOUN ) for chunk_NOUN in ner ]_NOUN )file_output1.write_NOUN ( output1_NOUN )file_output2.write_NOUN ( output2_NOUN )print_NOUN 'Operation_NOUN completed_VERB . Please_NOUN check_VERB \_NOUN ' { } \_NOUN ' and \_NOUN ' { } \_NOUN ' files_NOUN . '.format ( OUTPUT1_PATH_NOUN , OUTPUT2_PATH_NOUN )